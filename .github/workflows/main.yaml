name: Build
on: [push]

env:
  CI_BUILD_NUM: ${{ github.run_id }}
  CI_BRANCH: ${{ github.ref_name }}
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}

permissions:
  id-token: write
  contents: write  # semantic-release-dry verifies the write permissions
  issues: read # needed by semantic-release
  pull-requests: write # needed by semantic-release

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - run: npm install
      - run: npm test
      # - uses: codecov/codecov-action@v4
      #   with:
      #     token: ${{ secrets.CODECOV_TOKEN }}

  test-deploy:
    name: Test Deploy
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/main'
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - run: npm install
      - name: extracting last commit message
        run: |
          echo "CI_LAST_COMMIT_MSG=$(git show -s --format="%s")" >> $GITHUB_ENV
          echo CI_LAST_COMMIT_MSG
      - name: Branch Deployment
        run: npm run deploy:ci
      - name: Post-Deployment Integration Test
        run: npm run test-postdeploy
      - name: Semantic Release (Dry Run)
        run: npm run semantic-release-dry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  release:
    name: Release
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    needs: test
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20.x
        uses: actions/setup-node@v4
        with:
          node-version: '20.x'
      - run: npm install
      - name: extracting last commit message
        run: |
          echo "CI_LAST_COMMIT_MSG=$(git show -s --format="%s")" >> $GITHUB_ENV
          echo CI_LAST_COMMIT_MSG
      - name: Semantic Release
        run: npm run semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}